{"version":3,"sources":["businessValidator.js"],"names":["businessRequiredInputs","req","res","next","checkBody","name","notEmpty","options","errorMessage","isLength","min","description","email","isEmail","location","matches","category","photo","errors","validationErrors","status","send","message","msg"],"mappings":";;;;;AAAA;;;;;;;;AAQA,IAAMA,yBAAyB,SAAzBA,sBAAyB,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACjDF,MAAIG,SAAJ,CAAc;AACZC,UAAM;AACJC,gBAAU;AACRC,iBAAS,IADD;AAERC,sBAAc;AAFN,OADN;AAKJC,gBAAU;AACRF,iBAAS,CAAC,EAAEG,KAAK,CAAP,EAAD,CADD;AAERF,sBAAc;AAFN;AALN,KADM;AAWZG,iBAAa;AACXL,gBAAU;AACRC,iBAAS,IADD;AAERC,sBAAc;AAFN,OADC;AAKXC,gBAAU;AACRF,iBAAS,CAAC,EAAEG,KAAK,EAAP,EAAD,CADD;AAERF,sBAAc;AAFN;AALC,KAXD;AAqBZI,WAAO;AACLN,gBAAU;AACRC,iBAAS,IADD;AAERC,sBAAc;AAFN,OADL;AAKLK,eAAS;AACPL,sBAAc;AADP;AALJ,KArBK;AA8BZM,cAAU;AACRR,gBAAU;AACRC,iBAAS,IADD;AAERC,sBAAc;AAFN,OADF;AAKRC,gBAAU;AACRF,iBAAS,CAAC,EAAEG,KAAK,CAAP,EAAD,CADD;AAERF,sBAAc;AAFN,OALF;AASRO,eAAS;AACPR,iBAAS,aADF;AAEPC,sBAAc;AAFP;AATD,KA9BE;AA4CZQ,cAAU;AACRV,gBAAU;AACRC,iBAAS,IADD;AAERC,sBAAc;AAFN,OADF;AAKRC,gBAAU;AACRF,iBAAS,CAAC,EAAEG,KAAK,CAAP,EAAD,CADD;AAERF,sBAAc;AAFN,OALF;AASRO,eAAS;AACPR,iBAAS,aADF;AAEPC,sBAAc;AAFP;AATD,KA5CE;AA0DZS,WAAO;AACLX,gBAAU;AACRC,iBAAS,IADD;AAERC,sBAAc;AAFN,OADL;AAKLO,eAAS;AACPR,iBAAS,aADF;AAEPC,sBAAc;AAFP;AALJ;AA1DK,GAAd;AAqEA,MAAMU,SAASjB,IAAIkB,gBAAJ,EAAf;AACA,MAAID,MAAJ,EAAY;AACV,WAAOhB,IAAIkB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAASJ,OAAO,CAAP,EAAUK,GAArB,EAArB,CAAP;AACD;AACDpB;AACD,CA3ED;kBA4EeH,sB","file":"businessValidator.js","sourceRoot":"/home/marusoft/Downloads/WEConnect/server/middleware","sourcesContent":["/**\n * Check for all required input fields\n *\n * @param {object} req - The request object\n * @param {object} res - The response object\n * @param {function} next -Calls the next route handler\n * @returns {object} JSON object representing failure message\n */\nconst businessRequiredInputs = (req, res, next) => {\n  req.checkBody({\n    name: {\n      notEmpty: {\n        options: true,\n        errorMessage: 'Business name is required'\n      },\n      isLength: {\n        options: [{ min: 4 }],\n        errorMessage: 'Business name should be at least 4'\n      }\n    },\n    description: {\n      notEmpty: {\n        options: true,\n        errorMessage: 'Description is required'\n      },\n      isLength: {\n        options: [{ min: 10 }],\n        errorMessage: 'Description should have at least 10 charcters'\n      }\n    },\n    email: {\n      notEmpty: {\n        options: true,\n        errorMessage: 'Email is required'\n      },\n      isEmail: {\n        errorMessage: 'Email is invalid'\n      }\n    },\n    location: {\n      notEmpty: {\n        options: true,\n        errorMessage: 'Location is required'\n      },\n      isLength: {\n        options: [{ min: 3 }],\n        errorMessage: 'Location should have at least 3 characters'\n      },\n      matches: {\n        options: /^[a-zA-Z]+$/,\n        errorMessage: 'Location should contain alphabets only'\n      }\n    },\n    category: {\n      notEmpty: {\n        options: true,\n        errorMessage: 'Category is required'\n      },\n      isLength: {\n        options: [{ min: 6 }],\n        errorMessage: 'Category should have at least 6 characters'\n      },\n      matches: {\n        options: /^[a-zA-Z]+$/,\n        errorMessage: 'Category should contain alphabets only'\n      }\n    },\n    photo: {\n      notEmpty: {\n        options: true,\n        errorMessage: 'PhoneNumber is required'\n      },\n      matches: {\n        options: /^[a-zA-Z]+$/,\n        errorMessage: 'Photo is required'\n      }\n    }\n  });\n  const errors = req.validationErrors();\n  if (errors) {\n    return res.status(400).send({ message: errors[0].msg });\n  }\n  next();\n};\nexport default businessRequiredInputs;\n"]}