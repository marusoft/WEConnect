{"version":3,"sources":["reviewValidator.js"],"names":["reviewRequiredInput","req","res","next","checkBody","reviewContent","options","errorMessage","isLength","min","max","errors","validationErrors","status","send","message","msg"],"mappings":";;;;;AAAA;;;;;;;;AAQA,IAAMA,sBAAsB,SAAtBA,mBAAsB,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC9CF,MAAIG,SAAJ,CAAc;AACZC,mBAAe;AACbC,eAAS,IADI;AAEbC,oBAAc;AAFD,KADH;AAKZC,cAAU;AACRF,eAAS,CAAC,EAAEG,KAAK,CAAP,EAAUC,KAAK,GAAf,EAAD,CADD;AAERH,oBAAc;AAFN;AALE,GAAd;AAUA,MAAMI,SAASV,IAAIW,gBAAJ,EAAf;AACA,MAAID,MAAJ,EAAY;AACV,WAAOT,IAAIW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAASJ,OAAO,CAAP,EAAUK,GAArB,EAArB,CAAP;AACD;AACDb;AACD,CAhBD;kBAiBeH,mB","file":"reviewValidator.js","sourceRoot":"/home/marusoft/Downloads/WEConnect/server/middleware","sourcesContent":["/**\n * Checks for the required input fields\n *\n * @param {object} req - The request object\n * @param {object} res - The response object\n * @param {function} next - Calls the next route handler\n * @returns {object} JSON object representing the failure message\n */\nconst reviewRequiredInput = (req, res, next) => {\n  req.checkBody({\n    reviewContent: {\n      options: true,\n      errorMessage: 'Content is required'\n    },\n    isLength: {\n      options: [{ min: 6, max: 100 }],\n      errorMessage: 'Content should have between 6 and 1,000'\n    },\n  });\n  const errors = req.validationErrors();\n  if (errors) {\n    return res.status(400).send({ message: errors[0].msg });\n  }\n  next();\n};\nexport default reviewRequiredInput;\n"]}