{"version":3,"sources":["userValidator.js"],"names":["userRequiredInput","req","res","next","checkBody","name","notEmpty","options","errorMessage","isLength","min","matches","emailAddress","isEmail","password","errors","validationErrors","status","send","message","msg"],"mappings":";;;;;AAAA;;;;;;;;AAQA,IAAMA,oBAAoB,SAApBA,iBAAoB,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC5CF,MAAIG,SAAJ,CAAc;AACZC,UAAM;AACJC,gBAAU;AACRC,iBAAS,IADD;AAERC,sBAAc;AAFN,OADN;AAKJC,gBAAU;AACRF,iBAAS,CAAC,EAAEG,KAAK,CAAP,EAAD,CADD;AAERF,sBAAc;AAFN,OALN;AASJG,eAAS;AACPJ,iBAAS,aADF;AAEPC,sBAAc;AAFP;AATL,KADM;AAeZI,kBAAc;AACZN,gBAAU;AACRC,iBAAS,IADD;AAERC,sBAAc;AAFN,OADE;AAKZK,eAAS;AACPL,sBAAc;AADP;AALG,KAfF;AAwBZM,cAAU;AACRR,gBAAU;AACRC,iBAAS,IADD;AAERC,sBAAc;AAFN,OADF;AAKRC,gBAAU;AACRF,iBAAS,CAAC,EAAEG,KAAK,CAAP,EAAD,CADD;AAERF,sBAAc;AAFN;AALF;AAxBE,GAAd;AAmCA,MAAMO,SAASd,IAAIe,gBAAJ,EAAf;AACA,MAAID,MAAJ,EAAY;AACV,WAAOb,IAAIe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAASJ,OAAO,CAAP,EAAUK,GAArB,EAArB,CAAP;AACD;AACDjB;AACD,CAzCD;kBA0CeH,iB","file":"userValidator.js","sourceRoot":"/home/marusoft/Downloads/WEConnect/server/middleware","sourcesContent":["/**\n * Checks for the required input fields\n *\n * @param {object} req - The request object\n * @param {object} res - The response object\n * @param {function} next - Calls the next route handler\n * @returns {object} JSON object representing the failure message\n */\nconst userRequiredInput = (req, res, next) => {\n  req.checkBody({\n    name: {\n      notEmpty: {\n        options: true,\n        errorMessage: 'name is required'\n      },\n      isLength: {\n        options: [{ min: 2 }],\n        errorMessage: 'name length should be at least 2'\n      },\n      matches: {\n        options: /^[a-zA-Z]+$/,\n        errorMessage: 'name should be alphabets only'\n      }\n    },\n    emailAddress: {\n      notEmpty: {\n        options: true,\n        errorMessage: 'Email is required'\n      },\n      isEmail: {\n        errorMessage: 'Email is invalid'\n      }\n    },\n    password: {\n      notEmpty: {\n        options: true,\n        errorMessage: 'Password is required'\n      },\n      isLength: {\n        options: [{ min: 7 }],\n        errorMessage: 'password should be at least 7 characters'\n      }\n    }\n  });\n  const errors = req.validationErrors();\n  if (errors) {\n    return res.status(400).send({ message: errors[0].msg });\n  }\n  next();\n};\nexport default userRequiredInput;\n"]}