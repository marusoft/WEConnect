{"version":3,"sources":["userValidator.js"],"names":["UserValidation","req","res","next","checkBody","name","notEmpty","options","errorMessage","isLength","min","matches","emailAddress","isEmail","password","errors","validationErrors","status","send","message","msg"],"mappings":";;;;;;;;;;AAEA;;;IAGMA,c;;;;;;;;;AAEN;;;;;;8BAMmBC,G,EAAKC,G,EAAKC,I,EAAM;AAC/BF,UAAIG,SAAJ,CAAc;AACZC,cAAM;AACJC,oBAAU;AACRC,qBAAS,IADD;AAERC,0BAAc;AAFN,WADN;AAKJC,oBAAU;AACRF,qBAAS,CAAC,EAAEG,KAAK,CAAP,EAAD,CADD;AAERF,0BAAc;AAFN,WALN;AASJG,mBAAS;AACPJ,qBAAS,aADF;AAEPC,0BAAc;AAFP;AATL,SADM;AAeZI,sBAAc;AACZN,oBAAU;AACRC,qBAAS,IADD;AAERC,0BAAc;AAFN,WADE;AAKZK,mBAAS;AACPL,0BAAc;AADP;AALG,SAfF;AAwBZM,kBAAU;AACRR,oBAAU;AACRC,qBAAS,IADD;AAERC,0BAAc;AAFN,WADF;AAKRC,oBAAU;AACRF,qBAAS,CAAC,EAAEG,KAAK,CAAP,EAAD,CADD;AAERF,0BAAc;AAFN;AALF;AAxBE,OAAd;AAmCA,UAAMO,SAASd,IAAIe,gBAAJ,EAAf;AACA,UAAID,MAAJ,EAAY;AACV,eAAOb,IAAIe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAASJ,OAAO,CAAP,EAAUK,GAArB,EAArB,CAAP;AACD;AACDjB;AACD;;;;;;kBAEYH,c","file":"userValidator.js","sourceRoot":"/home/marusoft/Downloads/WEConnect/server/middleware","sourcesContent":["\n\n/**\n * @class Validate\n */\nclass UserValidation {\n\n/**\n  * @returns {Object} userInput\n  * @param {*} req\n  * @param {*} res\n  * @param {*} next\n  */\n  static userInput(req, res, next) {\n    req.checkBody({\n      name: {\n        notEmpty: {\n          options: true,\n          errorMessage: 'name is required'\n        },\n        isLength: {\n          options: [{ min: 2 }],\n          errorMessage: 'name length should be at least 2'\n        },\n        matches: {\n          options: /^[a-zA-Z]+$/,\n          errorMessage: 'name should be alphabets only'\n        }\n      },\n      emailAddress: {\n        notEmpty: {\n          options: true,\n          errorMessage: 'Email is required'\n        },\n        isEmail: {\n          errorMessage: 'Email is invalid'\n        }\n      },\n      password: {\n        notEmpty: {\n          options: true,\n          errorMessage: 'Password is required'\n        },\n        isLength: {\n          options: [{ min: 7 }],\n          errorMessage: 'password should be at least 7 characters'\n        }\n      }\n    });\n    const errors = req.validationErrors();\n    if (errors) {\n      return res.status(400).send({ message: errors[0].msg });\n    }\n    next();\n  }\n}\nexport default UserValidation;\n\n"]}