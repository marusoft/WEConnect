{"version":3,"sources":["businessController.js"],"names":["Businesses","req","res","length","status","send","json","getBusinesses","i","business","id","parseInt","params","businessId","message","body","name","description","photo","category","location","email","createBusiness","push","businesses","splice","next","result","query","searchResult"],"mappings":"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","file":"businessController.js","sourceRoot":"/home/marusoft/Downloads/WEConnect/server/controller","sourcesContent":["import businesses from '../models/businesses';\n/**\n * @class Businesses\n*/\nclass Businesses {\n  /**\n   * @returns {object} getBusinesses\n   * @param {*} req\n   * @param {*} res\n   */\n  static getBusinesses(req, res) {\n    if (businesses.length === 0) {\n      return res.status(404).send('404 business not found');\n    }\n    return res.status(200).json({\n      getBusinesses: businesses,\n    });\n  }\n\n  // Get a business\n  /**\n   * @returns {object} getABusiness\n   * @param {*} req\n   * @param {*} res\n   */\n  static getABusiness(req, res) {\n    for (let i = 0; i < businesses.length; i += 1) {\n      const business = businesses[i];\n      if (business.id === parseInt(req.params.businessId, 10)) {\n        return res.status(200).send({\n          status: 'Awesome',\n          business: businesses[i],\n          message: 'success',\n        });\n      }\n    }\n    return res.status(404).send({\n      status: 'Fail',\n      message: 'Business not found'\n    });\n  }\n\n  // Register a business\n\n  /**\n   * @returns {object} RegisterBusiness\n   * @param {*} req\n   * @param {*} res\n   */\n  static registerBusiness(req, res) {\n    const {\n      name, description, photo, category, location, email,\n    } = req.body;\n    const id = businesses.length + 1;\n    const createBusiness = {\n      id,\n      name,\n      photo,\n      location,\n      category,\n      description,\n      email,\n    };\n    businesses.push(createBusiness);\n    res.status(201)\n      .send({\n        business: createBusiness,\n        status: 'Success',\n        message: 'Business created successfully',\n      });\n  }\n  // Update Business Profile\n  /**\n   * @returns {object} UpdateBusinessProfile\n   * @param {*} req\n   * @param {*} res\n   */\n  static updateBusinessProfile(req, res) {\n    for (let i = 0; i < businesses.length; i += 1) {\n      if (businesses[i].id === parseInt(req.params.businessId, 10)) {\n        businesses[i].name = req.body.name;\n        businesses[i].photo = req.body.photo;\n        businesses[i].description = req.body.description;\n        businesses[i].category = req.body.category;\n        businesses[i].location = req.body.location;\n        businesses[i].email = req.body.email;\n        return res.status(201).json({\n          status: 'Success',\n          businesses,\n          message: 'Business profile updated successfully'\n        });\n      }\n    }\n    return res.status(404).send({\n      status: 'Fail',\n      message: 'Business not found'\n    });\n  }\n  // Remove a business\n  /**\n   * @returns {object} RemoveBusiness\n   * @param {*} req\n   * @param {*} res\n   */\n  static removeBusiness(req, res) {\n    for (let i = 0; i < businesses.length; i += 1) {\n      if (businesses[i].id === parseInt(req.params.businessId, 10)) {\n        businesses.splice(i, 1);\n        return res.status(200).json({\n          status: 'Awesome',\n          message: 'Business deleted successfully',\n        });\n      }\n    }\n    return res.status(404).send({\n      status: 'Fail',\n      message: 'Business not found'\n    });\n  }\n  /**\n   * @returns {object} Get all businesses with the specified location and category\n   * @param {*} req\n   * @param {*} res\n   * @param {*} next\n   */\n  static filterSearch(req, res, next) {\n    const result = [];\n    const { category, location } = req.query;\n    for (let i = 0; i < businesses.length; i += 1) {\n      if (category === businesses[i].category &&\n        location === businesses[i].location) {\n      // Get businesses in a particlar location within a category\n        result.push(businesses[i]);\n      } else if (!category && location === businesses[i].location) {\n      // Get all businesses within a location\n        result.push(businesses[i]);\n      } else if (category === businesses[i].category && !location) {\n      // Get all businesses within a category\n        result.push(businesses[i]);\n      } else if (!category && !location) {\n      // Go to next route\n        next();\n      }\n    }\n    return res.status(200)\n      .send({\n        searchResult: result,\n        message: 'Great, your search was successful',\n        status: 'Success',\n      });\n  }\n\n}\nexport default Businesses;\n"]}