{"version":3,"sources":["businessValidator.js"],"names":["BusinessValidator","req","res","next","checkBody","name","notEmpty","options","errorMessage","isLength","min","description","email","isEmail","location","matches","category","photo","errors","validationErrors","status","send","message","msg"],"mappings":";;;;;;;;;;AAAA;;;IAGMA,iB;;;;;;;;;AAEJ;;;;;;;kCAOqBC,G,EAAKC,G,EAAKC,I,EAAM;AACnCF,UAAIG,SAAJ,CAAc;AACZC,cAAM;AACJC,oBAAU;AACRC,qBAAS,IADD;AAERC,0BAAc;AAFN,WADN;AAKJC,oBAAU;AACRF,qBAAS,CAAC,EAAEG,KAAK,CAAP,EAAD,CADD;AAERF,0BAAc;AAFN;AALN,SADM;AAWZG,qBAAa;AACXL,oBAAU;AACRC,qBAAS,IADD;AAERC,0BAAc;AAFN,WADC;AAKXC,oBAAU;AACRF,qBAAS,CAAC,EAAEG,KAAK,EAAP,EAAD,CADD;AAERF,0BAAc;AAFN;AALC,SAXD;AAqBZI,eAAO;AACLN,oBAAU;AACRC,qBAAS,IADD;AAERC,0BAAc;AAFN,WADL;AAKLK,mBAAS;AACPL,0BAAc;AADP;AALJ,SArBK;AA8BZM,kBAAU;AACRR,oBAAU;AACRC,qBAAS,IADD;AAERC,0BAAc;AAFN,WADF;AAKRC,oBAAU;AACRF,qBAAS,CAAC,EAAEG,KAAK,CAAP,EAAD,CADD;AAERF,0BAAc;AAFN,WALF;AASRO,mBAAS;AACPR,qBAAS,aADF;AAEPC,0BAAc;AAFP;AATD,SA9BE;AA4CZQ,kBAAU;AACRV,oBAAU;AACRC,qBAAS,IADD;AAERC,0BAAc;AAFN,WADF;AAKRC,oBAAU;AACRF,qBAAS,CAAC,EAAEG,KAAK,CAAP,EAAD,CADD;AAERF,0BAAc;AAFN,WALF;AASRO,mBAAS;AACPR,qBAAS,aADF;AAEPC,0BAAc;AAFP;AATD,SA5CE;AA0DZS,eAAO;AACLX,oBAAU;AACRC,qBAAS,IADD;AAERC,0BAAc;AAFN,WADL;AAKLO,mBAAS;AACPR,qBAAS,aADF;AAEPC,0BAAc;AAFP;AALJ;AA1DK,OAAd;AAqEA,UAAMU,SAASjB,IAAIkB,gBAAJ,EAAf;AACA,UAAID,MAAJ,EAAY;AACV,eAAOhB,IAAIkB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAASJ,OAAO,CAAP,EAAUK,GAArB,EAArB,CAAP;AACD;AACDpB;AACD;;;;;;kBAGYH,iB","file":"businessValidator.js","sourceRoot":"/home/marusoft/Downloads/WEConnect/server/middleware","sourcesContent":["/**\n * @class Validate\n */\nclass BusinessValidator {\n\n  /**\n   * Check for all required input fields\n   * @param {object} req - The request object\n   *  @param {object} res - The response object\n   * @param {function} next -Calls the next route handler\n   * @returns {object} JSON object representing failure message\n   */\n  static businessInput(req, res, next) {\n    req.checkBody({\n      name: {\n        notEmpty: {\n          options: true,\n          errorMessage: 'Business name is required'\n        },\n        isLength: {\n          options: [{ min: 4 }],\n          errorMessage: 'Business name should be at least 4'\n        }\n      },\n      description: {\n        notEmpty: {\n          options: true,\n          errorMessage: 'Description is required'\n        },\n        isLength: {\n          options: [{ min: 10 }],\n          errorMessage: 'Description should have at least 10 charcters'\n        }\n      },\n      email: {\n        notEmpty: {\n          options: true,\n          errorMessage: 'Email is required'\n        },\n        isEmail: {\n          errorMessage: 'Email is invalid'\n        }\n      },\n      location: {\n        notEmpty: {\n          options: true,\n          errorMessage: 'Location is required'\n        },\n        isLength: {\n          options: [{ min: 3 }],\n          errorMessage: 'Location should have at least 3 characters'\n        },\n        matches: {\n          options: /^[a-zA-Z]+$/,\n          errorMessage: 'Location should contain alphabets only'\n        }\n      },\n      category: {\n        notEmpty: {\n          options: true,\n          errorMessage: 'Category is required'\n        },\n        isLength: {\n          options: [{ min: 6 }],\n          errorMessage: 'Category should have at least 6 characters'\n        },\n        matches: {\n          options: /^[a-zA-Z]+$/,\n          errorMessage: 'Category should contain alphabets only'\n        }\n      },\n      photo: {\n        notEmpty: {\n          options: true,\n          errorMessage: 'PhoneNumber is required'\n        },\n        matches: {\n          options: /^[a-zA-Z]+$/,\n          errorMessage: 'Photo is required'\n        }\n      }\n    });\n    const errors = req.validationErrors();\n    if (errors) {\n      return res.status(400).send({ message: errors[0].msg });\n    }\n    next();\n  }\n\n}\nexport default BusinessValidator;\n\n"]}