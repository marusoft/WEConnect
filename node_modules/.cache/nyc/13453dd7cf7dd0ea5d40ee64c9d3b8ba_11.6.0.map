{"version":3,"sources":["reviewController.js"],"names":["Reviews","req","res","i","length","id","parseInt","params","businessId","push","reviewer","body","reviewContent","status","json","businesses","reviews","message","send","business","review","j"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;;;AACA;;;IAGMA,O;;;;;;;;AACN;;;;;yCAK8BC,G,EAAKC,G,EAAK;AACpC,WAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAI,qBAAWC,MAA/B,EAAuCD,KAAK,CAA5C,EAA+C;AAC7C,YAAI,qBAAWA,CAAX,EAAcE,EAAd,KAAqBC,SAASL,IAAIM,MAAJ,CAAWC,UAApB,EAAgC,EAAhC,CAAzB,EAA8D;AAC5D,4BAAQC,IAAR,CAAa;AACXJ,gBAAI,kBAAQD,MAAR,GAAiB,CADV;AAEXM,sBAAUT,IAAIU,IAAJ,CAASD,QAFR;AAGXE,2BAAeX,IAAIU,IAAJ,CAASC;AAHb,WAAb;AAKA,iBAAOV,IAAIW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,oBAAQ,SADkB;AAE1BE,wBAAY,qBAAWZ,CAAX,CAFc;AAG1Ba,sCAH0B;AAI1BC,qBAAS;AAJiB,WAArB,CAAP;AAMD;AACF;AACD,aAAOf,IAAIW,MAAJ,CAAW,GAAX,EAAgBK,IAAhB,CAAqB;AAC1BL,gBAAQ,MADkB;AAE1BI,iBAAS;AAFiB,OAArB,CAAP;AAID;AACD;;;;;;;;8CAKiChB,G,EAAKC,G,EAAK;AACzC,WAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAI,qBAAWC,MAA/B,EAAuCD,KAAK,CAA5C,EAA+C;AAC7C,YAAMgB,WAAW,qBAAWhB,CAAX,CAAjB;AAAA,YACEiB,SAAS,EADX;AAEA,YAAID,SAASd,EAAT,KAAgBC,SAASL,IAAIM,MAAJ,CAAWC,UAApB,EAAgC,EAAhC,CAApB,EAAyD;AACvD,eAAK,IAAIa,IAAI,CAAb,EAAgBA,IAAI,kBAAQjB,MAA5B,EAAoCiB,KAAK,CAAzC,EAA4C;AAC1C,gBAAI,kBAAQA,CAAR,EAAWb,UAAX,KAA0BW,SAASd,EAAvC,EAA2C;AACzCe,qBAAOX,IAAP,CAAY,kBAAQY,CAAR,CAAZ;AACD;AACF;AACD,iBAAOnB,IAAIW,MAAJ,CAAW,GAAX,EAAgBK,IAAhB,CAAqB;AAC1BD,qBAAS,uBADiB;AAE1BF,wBAAY,qBAAWZ,CAAX,CAFc;AAG1Ba;AAH0B,WAArB,CAAP;AAKD;AACF;AACD,aAAOd,IAAIW,MAAJ,CAAW,GAAX,EAAgBK,IAAhB,CAAqB;AAC1BL,gBAAQ,MADkB;AAE1BI,iBAAS;AAFiB,OAArB,CAAP;AAID;;;;;;kBAIYjB,O","file":"reviewController.js","sourceRoot":"/home/marusoft/Downloads/WEConnect/server/controller","sourcesContent":["import reviews from '../models/reviews';\nimport businesses from '../models/businesses';\n/**\n * @class Reviews\n */\nclass Reviews {\n/**\n* @returns {object}  addReviewForBusiness\n* @param {*} req\n* @param {*} res\n*/\n  static addReviewForBusiness(req, res) {\n    for (let i = 0; i < businesses.length; i += 1) {\n      if (businesses[i].id === parseInt(req.params.businessId, 10)) {\n        reviews.push({\n          id: reviews.length + 1,\n          reviewer: req.body.reviewer,\n          reviewContent: req.body.reviewContent,\n        });\n        return res.status(201).json({\n          status: 'Success',\n          businesses: businesses[i],\n          reviews,\n          message: 'Review added successfully'\n        });\n      }\n    }\n    return res.status(404).send({\n      status: 'Fail',\n      message: 'Business not found',\n    });\n  }\n  /**\n  * @returns {object}  getAll reviews for a business\n  * @param {*} req\n  * @param {*} res\n  */\n  static getAllReviewsForABusiness(req, res) {\n    for (let i = 0; i < businesses.length; i += 1) {\n      const business = businesses[i],\n        review = [];\n      if (business.id === parseInt(req.params.businessId, 10)) {\n        for (let j = 0; j < reviews.length; j += 1) {\n          if (reviews[j].businessId === business.id) {\n            review.push(reviews[j]);\n          }\n        }\n        return res.status(200).send({\n          message: 'Success, review found',\n          businesses: businesses[i],\n          reviews\n        });\n      }\n    }\n    return res.status(404).send({\n      status: 'Fail',\n      message: 'Business not found'\n    });\n  }\n\n}\n\nexport default Reviews;\n"]}